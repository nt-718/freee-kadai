freee課題 メモ

4/17
To-do
1.アプリの構成を考える
2.Gitの勉強

Review
1.アプリの構成
出勤時：名前を入力してボタンをクリック(その時刻と名前を記録しておく)
⇒メッセージを表示　例．今日も一日頑張ろう！
退勤時：ボタンを入力
⇒メッセージと労働時間を表示　例．一日お疲れさまでした！(8時間)
※記録しておいた時間から労働時間を計算

〇使用する言語(候補)
・Python⇒Python自体はデータ分析で使ったことがあるが、アプリ開発の経験は無し
・React⇒環境構築がほとんど出来ている(ただしJavaScriptの知識は少ない)
・Flutter⇒別pcに環境は出来ているが、pcの不具合が心配
・HTML/CSS/Javascript⇒アプリというよりページになりそう(？)
・Ruby⇒以前Railsの環境構築に失敗している＋PCのストレージが厳しい

メモ
・mac bookとsurface laptopを使っているが、macの方はPCの不具合が心配
・surfaceの方はストレージが少なくRubyやFlutterの環境構築ができなかった
⇒PythonかReactを使って打刻アプリを作りたい


4/18,19
To-do
1.React tutorial
2.Gitの勉強

Review
1.Reactの勉強を始めたが、tutorial通りにコードを書いてもVSCodeの波線がなかなか解消されなかった。
　freeCodeCamp.orgのYoutube動画(https://youtu.be/bMknfKXIFA8?list=LL)が比較的新しくエラーも出なかったが、tutorialを終えるのに時間がかかりすぎるため、非現実的。
⇒JavaScriptの知識も浅いため、Reactでのアプリ開発はあきらめようと思う。
・pythonのフレームワーク決め
⇒Flaskは小規模開発に向いており、諸学者にもとっつきやすいという利点があるため、これを使ってアプリを作ることにした。


4/20,21
To-do
1.flask tutorial

Review
1.FlaskのDocumentと次のYoutube動画でFlaskについて勉強した。
(https://youtu.be/VtJ-fGm4gNg?list=LL)
(https://youtu.be/EQIAzH0HvzQ?list=LL)
(https://youtu.be/Qr4QMBUPxWo?list=LL)※一部


4/22
To-do
1.実際に開発スタート
2.Githubのrepositoryを作る

Review
1.データベース以外は一応形になった。
⇒flask_sqlalchemyで、データを取り出すと[<User1><User2><User3><User4>]のように表示されてしまう。
　しかし、.dbの中身をcatで見ると保存はされていた
　この問題が解決したらログイン機能と過去の出勤時間一覧ページを追加したい。
　今のままではかなり物足りないため入力フォーム上部に時計(HTML&CSS&Javascript)を表示することにした。

2.無事成功！


4/23
To-do
1.データベース不具合修正
2.デザイン改善

Review
1.データベース不具合修正
"IntegrityError
Exception raised when the relational integrity of the database is affected, e.g. a foreign key check fails.
This error is a DBAPI Error and originates from the database driver (DBAPI), not SQLAlchemy itself."
⇒なかなか解決できなかったのでデータベースを新しく作り直したらこのエラーが出た。
　おそらく作り直したデータベースのColumn要素が一つだけだったから。
　要素を2つにして新しく作り直したらエラーは解決したが、アウトプットしようとすると昨日のようになり、結局振り出しに。
⇒そこでデータベースを含んだチュートリアルを一から書き直してみたが、そちらは問題なく使えた。
　ルーティングの理解が間違っていたかもしれない。

2.デザイン改善
・欠勤の場合を追加。それに伴い欠勤を知らせるためのメッセージページを新しく作った。
⇒connectionrefusederror winerror 10061が出て、調べても解決の仕方がいまいちよくわからず、実際にメールを送ることには成功していない。
・過去の出退勤を確認できるカレンダーのページを追加。
⇒データベースの問題が解決したらこちらの情報も連携させたい。
・メッセージを時刻によって場合分け
⇒とりあえず11時を過ぎると遅刻メッセージ、労働時間が8時間を超えると働きすぎメッセージを表示

※課題の提出はできるだけ早めの方が良いみたいなので、明日データベースの問題が解決できなければ月曜日には最終チェックをして提出しようと思う。
データベースがない不完全な状態での提出はとても残念ではあるが、これからデプロイの仕方も調べないといけないため、安全策を取ることにする。
freee課題 メモ

4/17
To-do
1.アプリの構成を考える
2.Gitの勉強

Review
1.アプリの構成
出勤時：名前を入力してボタンをクリック(その時刻と名前を記録しておく)
⇒メッセージを表示　例．今日も一日頑張ろう！
退勤時：ボタンを入力
⇒メッセージと労働時間を表示　例．一日お疲れさまでした！(8時間)
※記録しておいた時間から労働時間を計算

〇使用する言語(候補)
・Python⇒Python自体はデータ分析で使ったことがあるが、アプリ開発の経験は無し
・React⇒環境構築がほとんど出来ている(ただしJavaScriptの知識は少ない)
・Flutter⇒別pcに環境は出来ているが、pcの不具合が心配
・HTML/CSS/Javascript⇒アプリというよりページになりそう(？)
・Ruby⇒以前Railsの環境構築に失敗している＋PCのストレージが厳しい

メモ
・mac bookとsurface laptopを使っているが、macの方はPCの不具合が心配
・surfaceの方はストレージが少なくRubyやFlutterの環境構築ができなかった
⇒PythonかReactを使って打刻アプリを作りたい


4/18,19
To-do
1.React tutorial
2.Gitの勉強

Review
1.Reactの勉強を始めたが、tutorial通りにコードを書いてもVSCodeの波線がなかなか解消されなかった。
　freeCodeCamp.orgのYoutube動画(https://youtu.be/bMknfKXIFA8?list=LL)が比較的新しくエラーも出なかったが、tutorialを終えるのに時間がかかりすぎるため、非現実的。
⇒JavaScriptの知識も浅いため、Reactでのアプリ開発はあきらめようと思う。
・pythonのフレームワーク決め
⇒Flaskは小規模開発に向いており、諸学者にもとっつきやすいという利点があるため、これを使ってアプリを作ることにした。


4/20,21
To-do
1.flask tutorial

Review
1.FlaskのDocumentと次のYoutube動画でFlaskについて勉強した。
(https://youtu.be/VtJ-fGm4gNg?list=LL)
(https://youtu.be/EQIAzH0HvzQ?list=LL)
(https://youtu.be/Qr4QMBUPxWo?list=LL)※一部


4/22
To-do
1.実際に開発スタート
2.Githubのrepositoryを作る

Review
1.データベース以外は一応形になった。
⇒flask_sqlalchemyで、データを取り出すと[<User1><User2><User3><User4>]のように表示されてしまう。
　しかし、.dbの中身をcatで見ると保存はされていた
　この問題が解決したらログイン機能と過去の出勤時間一覧ページを追加したい。
　今のままではかなり物足りないため入力フォーム上部に時計(HTML&CSS&Javascript)を表示することにした。

2.無事成功！


4/23
To-do
1.データベース不具合修正
2.デザイン改善

Review
1.データベース不具合修正
"IntegrityError
Exception raised when the relational integrity of the database is affected, e.g. a foreign key check fails.
This error is a DBAPI Error and originates from the database driver (DBAPI), not SQLAlchemy itself."
⇒なかなか解決できなかったのでデータベースを新しく作り直したらこのエラーが出た。
　おそらく作り直したデータベースのColumn要素が一つだけだったから。
　要素を2つにして新しく作り直したらエラーは解決したが、アウトプットしようとすると昨日のようになり、結局振り出しに。
⇒そこでデータベースを含んだチュートリアルを一から書き直してみたが、そちらは問題なく使えた。
　ルーティングの理解が間違っていたかもしれない。

2.デザイン改善
・欠勤の場合を追加。それに伴い欠勤を知らせるためのメッセージページを新しく作った。
⇒connectionrefusederror winerror 10061が出て、調べても解決の仕方がいまいちよくわからず、実際にメールを送ることには成功していない。
・過去の出退勤を確認できるカレンダーのページを追加。
⇒データベースの問題が解決したらこちらの情報も連携させたい。
・メッセージを時刻によって場合分け
⇒とりあえず11時を過ぎると遅刻メッセージ、労働時間が8時間を超えると働きすぎメッセージを表示

※課題の提出はできるだけ早めの方が良いみたいなので、明日データベースの問題が解決できなければ月曜日には最終チェックをして提出しようと思う。
データベースがない不完全な状態での提出はとても残念ではあるが、これからデプロイの仕方も調べないといけないため、安全策を取ることにする。

4/24
To-do
1.データベース不具合修正
2.メール送信機能(出来れば)
3.デプロイの仕方を調べる

Review
1.データベース不具合修正
・修正1
<user1>と表示されるのはこのように書けば解決できた。
{% for user in users %}
<p>{{ user.user }}</p>
{% endfor %}
これまでは<p>{{ users.user }}</p>ようにしていたから上のような表示になったっぽい。
次に、退勤時に次の日のタスクをデータベースで管理し、それを次の出勤時に表示するようにした。
・修正2
出勤ボタンを押したときに、ユーザーネーム、Date、時間、分をデータベースに記録。
カレンダー上で出勤時刻が11時を超えた日を遅刻と表示する機能を追加。

⇒現在の課題(少し厳しめ)
・ユーザーごとにデータを管理できていない
・ログイン機能が実装できていない⇐必要ないかも(4/26)
・カレンダーに欠勤の表示を追加
※これらが完成しなくても提出し、何か進展があればgit pushしようと思う。

2.TCP/IP通信(?)の知識がなく、解決には時間がかかりそうなので最後時間があれば取り組もうと思う。

3.デプロイはHerokuを使おうと思う。

今日で9割以上完成。UIは全て中央配置しているだけだが、機能面がある程度形になってよかった。
来週以降、また朝から夕方まで大学にいるため、今のコードの無駄をできるだけ省いて、課題提出しようと思う。

4/25
To-do
1.デザイン改善
2.データベースをユーザーごとに管理
3.Herokuの登録

Review
1.デザイン改善
flask-bootstrapというものを取り入れてみたが使いこなせなかった。とりあえず、Todoリストの管理画面と各ページのボタンを修正。

2.データベースをユーザーごとに管理
カレンダーに最新の情報しか表示されなかったため修正したが、データベースに日付が重複して記録されているため、一日で数多くの文字が表示されてしまっている。
⇒表示に使うeventsという名前のリストで、重複するものをset()で削除しようとしたが、unhashable type: dictというエラーが出た。
　ハッシュについて勉強して修正することも考えたが、データベース内の重複を直そうと思う。

3.Herokuの登録、Heroku CLIの導入、Gunicornのインストールを行った。

※採用担当の方に問い合わせたところ、GithubのURLを提出してから早くても5/16までは面接はなく、引き続きコードの修正を行っていいとのことなので、とりあえず今日の分をgit pushして提出しようと思う。

4/26
To-do
1.デザイン改善
2.データベースをユーザーごとに管理
3.コードにコメントを追加する

Review
1.デザイン改善
・これまで画面の半分でアプリの確認をしていたため、全画面表示にしたときの横の隙間に気付かなかった。
・働く時間の多様性を考え、ユーザーごとに出勤時間の門限を定めるのもありかも。

※freee人事労務ソフトの勤怠管理を見て重大なことに気付いた。
⇒出勤画面(index.html)からホーム(home.html)にエントリーし、仕事終わりに退勤画面(finish.html)に飛ぶという構造にしたが、必ずしもホーム画面をずっと開いているとは限らない。
　そのため、ユーザーごとに出勤時間を管理し、画面を閉じてしまっても良い設計にしないといけない。

2.データベースをユーザーごとに管理
・したいこと
⇒毎日のユーザーのダブルカウントを防ぐ
　ユーザーごとにカレンダーの内容を変更

・解決案
⇒同じ日付データの中で、名前が共通しているものを、新しいものから順に削除。
⇒方法
　1.範囲指定のdistinct(一度は重複データを生成するアプローチ)
　2.登録するときに条件分岐(そもそも重複データを生まないアプローチ)
　3.全ての情報を取り込んでから、条件に合うものだけ利用(重複データををそのままにするアプローチ)
　他にもやり方があるかもしれないが、2のアプローチが一番スマートだと思うので、登録時にどのようにフィルターをかけるかを考える。

3.コードにコメントを追加する
　簡単にではあるが完了
⇒また、各コードで何がしたいかについてのコメントも追加しようと思う。

メモ
今後の課題
・ユーザーと出勤日がともに重複したデータを生まない
・出勤と退勤のデータだけでなく欠勤についてもカレンダーに登録
・全画面表示したときの横幅を調整


4/27
To-do
1.


Review
この2日間はオンライン用履歴書の準備と、大学の講義で忙しく、コードの修正が何もできていない。

メモ　
コードに関して直した方がいいところ
・ルーティングの書き直し
・労働時間の計算に使うデータを、データベースに記録した時間データに切り替える
・データベースに記録するタイミングの修正

明日以降、4/26分の課題と合わせて取りかかりたい。

4/28
To-do
1.コードの改善
2.データベースの改善


Review
1.コードの改善
無駄なコードを少し削った。


2.データベースの改善
メモ 上の解決案の2がなかなかうまくいかない
〇したいこと
出勤ボタンを押したとき、入力した名前とその日の日付が、最新のデータベースのなかでともに一致しているものが存在していなければそれらのデータを追加するようにする。
for文で順番に確認して、if文で場合分け
⇒いろいろと試してみたが無理だった。(書き方が悪かった可能性も)
　日付の一致で考えるのは良くなかったか、for文で探すのがよくなかったか、まだ頭が整理できていないため、少し時間を空けて考え直す。
　この部分だけ先にgit pushしておいて、あとで確認できるようにしておく。


4/29
To-do
1.データベースの改善

Review
1.データベースの改善
データベースに苦戦していた理由がやっとわかった。
まずデータベースの中身を確認するのに、いつもUbuntuのcatコマンドで見ていたこと、そして、エディターでpyファイルを保存するとサーバー？が毎回リロードしていることを知らず、
リロードが終わるまでにページの更新やボタンクリックを行っていたからだと思われる。

長くなるが、あとで振り返るためにここに書く。

〇ubuntu
cmd: cat data.db
               .%!中川崇大2022-04-29204-%!中川崇大2022-04-29204,%!中川崇大2022-04-29201 +%!中川崇大2022-04-291956 *%!中川崇大2022-04-291956 )%!中川崇大2022-04-291955 (%!中川崇大2022-04-291955'!test2022-04-291954 %%!中川崇大2022-04-291953 $%!中川崇大2022-04-291951 #%!中川崇大2022-04-291950 !%!中川崇大2022-04-291948  %!中川崇大2022-04-291948 %!中川崇大2022-04-291948 %!中川崇大2022-04-29194                                                                                    47 %!中川崇大2022-04-291946 %!中川崇大2022-04-291946 川崇大2022-04-291946 %!                                                                                    !中川崇大2022-04-291943 %!中川崇大2022-04-291942 %!中川崇大2022-04-291941�iueo2022-04-291937!nakagawa2022-04-291937!nakagawa2022-04-291936!nakagaw%!中川崇大2022-04-29192722-04-291934
                            !中川2022-04-291926
                                                    !中川2022-04-291925
!中川2022-04-291914         %!中川崇大2022-04-291912!中川2022-04-291912"!test2022-04-291949 %!中川崇大2022-04-281557 %!中川崇大2022-04-281557 %!中川崇大2022-04-281557 %!中川崇大2022-04-281556%! %!中川崇大2022-04-291929&!test2022-04-291953


〇hello.py
new = User.query.filter_by(user="nakagawa", starth=19, startm=36).first_or_404()
aaa = new.id

⇒この中のstartm(分)が36のときと37の時のidを表示すると21と22だったのでうまく取ってくることが出来ている。
また、deleteをしてもしっかりと消せていた。

以前はdeleteすら出来なかったが、その理由がリロード中に実行して途中からおかしくなっていたからだと思われる。
 
 * Detected change in 'C:\\Users\\817nk\\Documents\\freee-kadai\\dakoku-app\\hello.py', reloading
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 404-209-173
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)

毎回この最後のRunningが出てくるまで待つ必要があった。
また、そのせいなのか、上のdata.dbの一番下にはtestというuser名がはいっているが、これのidを取得したり、deleteすることが出来なかった。
実際にはデータベース上に存在していないのかも？

追記
いろいろ実験していると、削除してもcat data.dbの表示結果からは消えないことがわかった。
データベースの中身をhome.htmlに表示し、消えていることを確認したが、catの結果では表示されている。
⇒データベースの中身を確認するときに、catを使うのは適さない。
　.dbファイルを見るためにDB browser for SQLite(Ubuntu)というものをインストールしてみたが、起動しても全く反応がない。
　しばらくはhtmlに実際に表示して確認しながらやろうと思う。

再追記
addしたものもcatの結果に反映していないことがわかった。データベースを新しく作ったとき時点ではそれで確認できていたので、データが増えていくと見れなくなるのかもしれない。
これまでcatでデータが追加されているのかを確認していたため、かなり振り回されていたことになるが、今回気づけて良かった。

メモ
したいこと
受け取ったユーザー名とその時刻でフィルターをかけ、存在しなければ追加する。

    if request.method == 'POST':
        
        day=datetime.now().date()　⇐時間
        username = request.form.get('username')　⇐名前
    
        check = User.query.filter_by(user=username, day=day)　⇐時間と名前でフィルター
        
        if check is None:　⇐無ければ
            newinfo = User(user=username, day=day, starth=st_h, startm=st_m)
            db.session.add(newinfo)
            db.session.commit()        
        
        else:　あれば何もしない(追加しない)
            pass

これでは上手くいかなかった。インプットする名前によってはしっかりとってくることが出来ているので、if文の判定が上手くいっていない。
if check is None:
この書き方が間違っていると思うので、明日はこの判定の書き方から始める。
とりあえず日が変わるのでgit pushします。


4/30
To-do
1.課題に取り組む

2.デザイン改善

Review
1.データベースの改善
・上のデータベースの重複登録問題は解決しました。
　まずメモにあるif check is None:はそのままで大丈夫でした。
　その上のcheck = User.query.filter_by(user=username, day=day)がNoneと対応？していないらしく、
　毎回elseの処理が行われ、何も登録されていないという状況でした。
　Flask SQLAlchemyのドキュメントを確認してみると、
　check = User.query.filter_by(user=username, day=day).first()
　とすればNoneで判定できるみたいなので試してみたところ、登録することが出来ました。
　そして登録されたものを確認しても二度目のものは登録されておらず、当初の目的は達成できました。
　めちゃくちゃうれしい！！

・過去の出勤状況(カレンダー)をユーザーごとの表示に変更
⇒労働時間の表示もありだが、退勤時間のデータも登録しないといけないためいったん保留。

・ユーザーごとに労働時間の計算

・ユーザーごとのTodo管理は未実装
⇒データベースが分かれているためすぐには難しそう


2.デザイン改善
・Todoリストの中央揃えを解消

・ヘッダーの追加に伴ってボタンの配置を変えてみた

・ボタンやリンクにhover機能をつけて少しでも活き活きと

※まだ昼ですが早めに終わって勉強と面接対策をします。


5/1
To-do
1.課題に取り組む
2.コンテンツ改善


Review
1.課題に取り組む
・ユーザーのホームからカレンダーへ移動し、ヘッダーのホームリンクからユーザーのホームへ戻った時に、
　名前が消えてしまう減少を解決
　⇒ホームとカレンダー、Todo管理の行き来が可能に
　⇒ヘッダーの行き来は可能になったがTodoリストの追加や削除のredirectがうまく機能しなくなった。
　⇒とりあえずrender_templateに書き直して解決。


2.コンテンツ改善
・homeに息抜きとしてFlutterのチュートリアル時に表示されるようなクリック回数のカウンターと、
　数独(A Number)を追加しようと思う。
　追加の目的としては、打刻アプリ作成をおこなうときに、このようなゲーム機能をつけようと思う学生はなかなかいないだろうということ、
　数独に関しては、アプリ作成経験の話をするときに使いたいということ、あとは単純に脳のリフレッシュが作業の効率を高めると考えられることが挙げられる。

・カウンターのJavaScriptの中で、なかなかボタンクリックが上手くいかなかったが、よく見てみるとgetElement's'ByIdとなっていた。
⇒次は素数のときだけ赤色にしてみようと思う。

・素数のときだけ色を変える
⇒方法：素数のときに新しくクラスを追加しようと思う。

       function numberStyle(){
           let counter = document.getElementById("counter")
           
           if (count%3 == 1){
            counter.classList.add("prime");
           }
           else{
            counter.classList.remove("prime");
            
           }
       }

　counterの定義にletを入れていなくてずっとエラーが出ていた。
　これは試しに3で割った時の余りが1なら色を変えている。

⇒素数の判定
    let counter = document.getElementById("counter")
            let k
            for (let i = 2; i <= count/2 ; i++){
                if (count % i == 0){
                    k = true;
                    break;
                    }
                    else{
                        k = false
                    }
            }
　kがfalseのときに上の関数を実行してみたが、見た感じうまくいってそうではある。
追記
上のやり方だと3が含まれないことに気付いた。
iの範囲を半分にしておくことで計算量が抑えられるかなと思ったがしばらくはcountまで計算することにする。
　

※Recruiter Experience(そのような言葉はないが)の向上にためにREADMEと同じ階層にmemo.txtを可視化したhtmlを用意した。
⇒もともとこのmemo.txtは見てもらうことを前提としていないということと、見ていただいたとしてもかなり見にくく、
　逆の立場なら見るのが面倒と思えたため作成。未完成。


5/2
To-do
1.課題に取り組む


Review
※素数カウンターについて
2も素数であることを忘れていたため修正。
2と3のときだけ分けて判定することにしたため、iの範囲も2から(count/2)-1までとした。

1.課題に取り組む

・課題を追加しました。

・sudoku.htmlの構造をどうしようか考えた。
⇒実際に問題を解くという機能をつけたかったが、JavaScriptでの書き方がわからないため、今回はあくまで紹介ページとすることに決めた。


5/3
To-do
1.課題に取り組む(特にデータベース周り)


Review
・Todoリストのデータベースをユーザーごとに管理。
⇒ホームに表示するタスク内容をユーザーごとに変更。

・データベースに欠勤データを追加し、カレンダーの内容にも欠勤を追加。
⇒データの要素にAbsence(Boolean, default=False)を追加し、欠勤ボタンを押した時点でTrueに変更。
⇒Trueのときにカレンダーで欠勤表示。
⇒メッセージの送信機能はいったんコメントアウトしておく。
⇒出勤：労働時間(青色)、遅刻：労働時間(緑色)、欠勤：欠勤(赤色)と場合分け。

・退勤時刻のデータも追加
⇒労働時間をカレンダーに表示

・Adminというユーザー名でログインすると全ユーザーの勤怠状況を確認できるようにした。
⇒Adminでログインしたときにはデータベースに記録しない。
⇒今後、フィルター機能と出勤・退勤時刻の編集機能を追加したい。
⇒欠勤や遅刻の表示といった細かい修正が残っている。

※数独のページを画像だけにしようかと考えていたが、html/css/Javascriptで書かれたものを見つけたので書き換えて使おうかと思っている。(未定)

※データベースの出退勤時間が、アプリを作り始めのころから変わらずString型で登録されていることに気付いた。
⇒また余裕があるときにIntegerに変えようと思う。


5/4 
To-do
1.課題に取り組む

・細かい修正
8 詳細なコメントを追加
3 数独ページの案を考える
4 visualize.html
10.Admin:フィルター機能と出勤・退勤時刻の編集機能を追加


Review
・時計の下にデジタル時計を追加してみた。
⇒またJavascriptを書き換える。

3 数独ページの案を考える
⇒ページを増やしたくないのでタブで難易度を切り替えようと思う。
⇒Javascriptの知識が少ないのですこし勉強し始めた。
・https://www.youtube.com/watch?v=QCjFPSO96RU
・https://www.youtube.com/watch?v=3ZRGVJStUFs

10 出退勤時間の変更申請ページを作った。(思ってた以上に時間がかかり他のタスクは未着手)
⇒ユーザーの場合は申請フォームを表示し、Adminの場合はその許可/拒否を表示。
⇒もう少しうまくコードを書く方法がある気がするが一応機能としては完成。


5/5
To-do
1.課題に取り組む


Review

・素数カウンターの素数判定のコードを修正。
⇒iをcount/2ではなくMath.sqrt(count)に変えた。
⇒これで例えば14を判定するときに、2と7で二回チェックしなくていいと思う。
⇒追記：そもそも見つかった時点でbreakしているので必要なかったかもしれない。
　　　　ただし、2を判定した上で4を判定するのはまた別の非効率だと気づいた。
　　　　そこでエラトステネスの篩を使おうかとも考えたが、違いが現れるほどのクリック数は非現実的と考え保留。

・pythonのsplitが便利だと気づいたので、データベースの出勤時間(時)、出勤時間(分)を統一しようと思うが、
　書き換えないといけないところが多いため保留。

・Admin画面の欠勤表示の実装

・出退勤の変更申請とAdminによる判断の実装

メモ
visualize.htmlをアプリに組み込みました。


5/6
To-do
1.課題に取り組む


Review

1.数独ページ
結局画像で問題を紹介するだけにした。


5/7
To-do
1.課題に取り組む


Review
1.Herokuにてデプロイしてみた。
⇒なかなかデプロイ後のエラーが解消されず途方に暮れていたが、やるしかないと思い、とにかく調べまくり、一から確認をし直したことで何とかWebに公開することが出来た。
⇒README冒頭にアプリのURLを載せておく。
⇒エラーの内容は後日細かく書こうと思う。

5/8
1.課題に取り組む

Review

〇デプロイして気づいたこと
・画面を移動するたびに一瞬白い画面が見えてしまう。
・スマホ版のレスポンシブ対応をしていないため、見た目が残念に。
・タイムゾーンを設定していないと日本時刻11時で出勤したとき、2時で記録されている。
⇒pytzでAsia/Tokyoに設定して対処済み。
・database.dbからデータを参照する形なので、新しくgit push heroku masterをすると、前回のpushとの間の出勤情報が消えてしまう。


5/9
1.課題に取り組む

Review
3.Adminホームにフィルター機能を追加した。

メモ　デプロイ時のエラー
・Pythonの仮想環境(？)を使っておらず、requirements.txtにpip freezeしたときにtensorflow等の関係のないものまで含まれていた。
　全てが含まれたため、その中にエラーを発生させるものがいくつもあり、必用だと思われるもの以外削除していたが、その必要性の判断が間違えていた。
・Herokuのドキュメントを見ながら進め、デプロイはできたがApplication errorが発生。heroku logs --tailで確認すると、H14というエラーがでていた。
・H14への対処法を公式のドキュメントやいろんなサイトを見たが解決せず、コンソールを見るコマンド「heroku run console」を実行したが、
　bash ~というエラーが出て使えなかった。
・次にrequirements.txtやProcfileの確認をし、Pythonの必用なライブラリを調べ、それを追加した(MarkupSafeなど)。するとエラー内容がH10に変わった。
・ここでgunicorn関係の記述がなかったことに気付き、gunicornの使い方も含まれたデプロイ方法を紹介するサイトを見て実行し、Application errorは出なくなった。
・結局は初歩的なところで詰まっていたことがわかったが、無事Web公開できてよかった。


5/10
1.課題に取り組む

Review
visualize.htmlの制作と紹介動画


5/11
1.課題に取り組む

Review
出勤の変更申請が、既に出勤している日でないとエラーが発生することに気付いた。
対処法：
⇒現在は名前と入力された日付でデータベースから情報を取得して変更を行っているが
、そのデータが存在していないときの処理を書いていなかった。
　なので欠勤登録のようにして対処する。

----------------------------------------------------------------------------------


課題一覧 5/10
1.visualize.htmlのデザインと内容の更新 ⇐完了 5/10
2.出退勤時刻の表示が16:1のようになるのを直す ⇐保留 5/6
3.スマホ版レスポンシブ(余裕があれば)
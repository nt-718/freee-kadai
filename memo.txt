freee課題 メモ

4/17
To-do
1.アプリの構成を考える
2.Gitの勉強

Review
1.アプリの構成
出勤時：名前を入力してボタンをクリック(その時刻と名前を記録しておく)
⇒メッセージを表示　例．今日も一日頑張ろう！
退勤時：ボタンを入力
⇒メッセージと労働時間を表示　例．一日お疲れさまでした！(8時間)
※記録しておいた時間から労働時間を計算

〇使用する言語(候補)
・Python⇒Python自体はデータ分析で使ったことがあるが、アプリ開発の経験は無し
・React⇒環境構築がほとんど出来ている(ただしJavaScriptの知識は少ない)
・Flutter⇒別pcに環境は出来ているが、pcの不具合が心配
・HTML/CSS/Javascript⇒アプリというよりページになりそう(？)
・Ruby⇒以前Railsの環境構築に失敗している＋PCのストレージが厳しい

メモ
・mac bookとsurface laptopを使っているが、macの方はPCの不具合が心配
・surfaceの方はストレージが少なくRubyやFlutterの環境構築ができなかった
⇒PythonかReactを使って打刻アプリを作りたい


4/18,19
To-do
1.React tutorial
2.Gitの勉強

Review
1.Reactの勉強を始めたが、tutorial通りにコードを書いてもVSCodeの波線がなかなか解消されなかった。
　freeCodeCamp.orgのYoutube動画(https://youtu.be/bMknfKXIFA8?list=LL)が比較的新しくエラーも出なかったが、tutorialを終えるのに時間がかかりすぎるため、非現実的。
⇒JavaScriptの知識も浅いため、Reactでのアプリ開発はあきらめようと思う。
・pythonのフレームワーク決め
⇒Flaskは小規模開発に向いており、諸学者にもとっつきやすいという利点があるため、これを使ってアプリを作ることにした。


4/20,21
To-do
1.flask tutorial

Review
1.FlaskのDocumentと次のYoutube動画でFlaskについて勉強した。
(https://youtu.be/VtJ-fGm4gNg?list=LL)
(https://youtu.be/EQIAzH0HvzQ?list=LL)
(https://youtu.be/Qr4QMBUPxWo?list=LL)※一部


4/22
To-do
1.実際に開発スタート
2.Githubのrepositoryを作る

Review
1.データベース以外は一応形になった。
⇒flask_sqlalchemyで、データを取り出すと[<User1><User2><User3><User4>]のように表示されてしまう。
　しかし、.dbの中身をcatで見ると保存はされていた
　この問題が解決したらログイン機能と過去の出勤時間一覧ページを追加したい。
　今のままではかなり物足りないため入力フォーム上部に時計(HTML&CSS&Javascript)を表示することにした。

2.無事成功！


4/23
To-do
1.データベース不具合修正
2.デザイン改善

Review
1.データベース不具合修正
"IntegrityError
Exception raised when the relational integrity of the database is affected, e.g. a foreign key check fails.
This error is a DBAPI Error and originates from the database driver (DBAPI), not SQLAlchemy itself."
⇒なかなか解決できなかったのでデータベースを新しく作り直したらこのエラーが出た。
　おそらく作り直したデータベースのColumn要素が一つだけだったから。
　要素を2つにして新しく作り直したらエラーは解決したが、アウトプットしようとすると昨日のようになり、結局振り出しに。
⇒そこでデータベースを含んだチュートリアルを一から書き直してみたが、そちらは問題なく使えた。
　ルーティングの理解が間違っていたかもしれない。

2.デザイン改善
・欠勤の場合を追加。それに伴い欠勤を知らせるためのメッセージページを新しく作った。
⇒connectionrefusederror winerror 10061が出て、調べても解決の仕方がいまいちよくわからず、実際にメールを送ることには成功していない。
・過去の出退勤を確認できるカレンダーのページを追加。
⇒データベースの問題が解決したらこちらの情報も連携させたい。
・メッセージを時刻によって場合分け
⇒とりあえず11時を過ぎると遅刻メッセージ、労働時間が8時間を超えると働きすぎメッセージを表示

※課題の提出はできるだけ早めの方が良いみたいなので、明日データベースの問題が解決できなければ月曜日には最終チェックをして提出しようと思う。
データベースがない不完全な状態での提出はとても残念ではあるが、これからデプロイの仕方も調べないといけないため、安全策を取ることにする。

4/24
To-do
1.データベース不具合修正
2.メール送信機能(出来れば)
3.デプロイの仕方を調べる

Review
1.データベース不具合修正
・修正1
<user1>と表示されるのはこのように書けば解決できた。
{% for user in users %}
<p>{{ user.user }}</p>
{% endfor %}
これまでは<p>{{ users.user }}</p>ようにしていたから上のような表示になったっぽい。
次に、退勤時に次の日のタスクをデータベースで管理し、それを次の出勤時に表示するようにした。
・修正2
出勤ボタンを押したときに、ユーザーネーム、Date、時間、分をデータベースに記録。
カレンダー上で出勤時刻が11時を超えた日を遅刻と表示する機能を追加。

⇒現在の課題(少し厳しめ)
・ユーザーごとにデータを管理できていない
・ログイン機能が実装できていない⇐必要ないかも(4/26)
・カレンダーに欠勤の表示を追加
※これらが完成しなくても提出し、何か進展があればgit pushしようと思う。

2.TCP/IP通信(?)の知識がなく、解決には時間がかかりそうなので最後時間があれば取り組もうと思う。

3.デプロイはHerokuを使おうと思う。

今日で9割以上完成。UIは全て中央配置しているだけだが、機能面がある程度形になってよかった。
来週以降、また朝から夕方まで大学にいるため、今のコードの無駄をできるだけ省いて、課題提出しようと思う。

4/25
To-do
1.デザイン改善
2.データベースをユーザーごとに管理
3.Herokuの登録

Review
1.デザイン改善
flask-bootstrapというものを取り入れてみたが使いこなせなかった。とりあえず、Todoリストの管理画面と各ページのボタンを修正。

2.データベースをユーザーごとに管理
カレンダーに最新の情報しか表示されなかったため修正したが、データベースに日付が重複して記録されているため、一日で数多くの文字が表示されてしまっている。
⇒表示に使うeventsという名前のリストで、重複するものをset()で削除しようとしたが、unhashable type: dictというエラーが出た。
　ハッシュについて勉強して修正することも考えたが、データベース内の重複を直そうと思う。

3.Herokuの登録、Heroku CLIの導入、Gunicornのインストールを行った。

※採用担当の方に問い合わせたところ、GithubのURLを提出してから早くても5/16までは面接はなく、引き続きコードの修正を行っていいとのことなので、とりあえず今日の分をgit pushして提出しようと思う。

4/26
To-do
1.デザイン改善
2.データベースをユーザーごとに管理
3.コードにコメントを追加する

Review
1.デザイン改善
・これまで画面の半分でアプリの確認をしていたため、全画面表示にしたときの横の隙間に気付かなかった。
・働く時間の多様性を考え、ユーザーごとに出勤時間の門限を定めるのもありかも。

※freee人事労務ソフトの勤怠管理を見て重大なことに気付いた。
⇒出勤画面(index.html)からホーム(home.html)にエントリーし、仕事終わりに退勤画面(finish.html)に飛ぶという構造にしたが、必ずしもホーム画面をずっと開いているとは限らない。
　そのため、ユーザーごとに出勤時間を管理し、画面を閉じてしまっても良い設計にしないといけない。

2.データベースをユーザーごとに管理
・したいこと
⇒毎日のユーザーのダブルカウントを防ぐ
　ユーザーごとにカレンダーの内容を変更

・解決案
⇒同じ日付データの中で、名前が共通しているものを、新しいものから順に削除。
⇒方法
　1.範囲指定のdistinct(一度は重複データを生成するアプローチ)
　2.登録するときに条件分岐(そもそも重複データを生まないアプローチ)
　3.全ての情報を取り込んでから、条件に合うものだけ利用(重複データををそのままにするアプローチ)
　他にもやり方があるかもしれないが、2のアプローチが一番スマートだと思うので、登録時にどのようにフィルターをかけるかを考える。

3.コードにコメントを追加する
　簡単にではあるが完了
⇒また、各コードで何がしたいかについてのコメントも追加しようと思う。

メモ
今後の課題
・ユーザーと出勤日がともに重複したデータを生まない
・出勤と退勤のデータだけでなく欠勤についてもカレンダーに登録
・全画面表示したときの横幅を調整